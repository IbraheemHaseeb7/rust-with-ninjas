1- RUST specifies data types itself according to the input given to it (what i think so). uses the keyword "let" to do so.
2- the macro symbol "!" is necessary for the println script to work.
3- String literal "{}" is necessary for printing of a string

CODE:
fn main() {

    println!("Hello, world!");
    let a = 'c';
    let b = 10;
    println!("{}", a);
    println!("{}" ,b);
    
    let c = 2;
    print!("{}" ,c);
}

4- arithmetic functions are executed the same as any other language
fn main() {

    println!("Hello, world!");
    let a = 3;
    let b = 10;
    
    println!("{}", a+b);
    println!("{}" ,a*b);
    println!("{}" , a/b);
    println!("{}" , a%b);
    println!("{}" , a-b);
    
}

5- for Array declaration, synatax has the memory 'type' in it.
6- its not necessary to mention the type (i32), you can also do this, (let arr = [1,3,4];)
7- for printing elements of arrays or simply if we use a loop on an array, an iterator method is called.
 fn main() {

    let _a = 3;
    let _b = 10;

    /* "i" represents "integer" and the "32" represents 32 bit storage 
    followed by 3 
    which is the size of the array
    */
    
    let arr: [i32; 3] = [1, 2, 3]; //declaration of an integer array in rust

    /*
    here, the arr.iter() is the syntax for calling
    an iterator method on the loop. basically another 
    form of the enhanced loop.
    */
    for element in arr.iter() {
        println!("{}", element);
    }
}

